* Cloud Preferences API

Cloud Preferences provides a RESTful API and is designed to be work with OpenStack and Rackspace Cloud.  It let's you store and manage data associated with tenants, users, devices and more.

** Overview

Cloud Preferences is built with Python and uses Tornado for the web framework providing asynchronous networking and Motor for non-blocking MongoDB support.

** Installation

Install the Cloud Preferences API, Supervisor, MongoDB and Memcached:

#+BEGIN_SRC sh
apt-get install supervisor mongodb-server nginx python-pip python-dev git htop dstat
pip install git+https://github.com/treytabner/python-cloudprefs.git
#+END_SRC

** Configuration

Configuration is done at runtime or with the Supervisor configuration file.  Create ~/etc/supervisor/conf.d/cloudprefs.conf~ with the following content:

#+BEGIN_SRC conf
[program:cloudprefs]
process_name=cloudprefs:%(process_num)s
command=python -m cloudprefs --port=%(process_num)s --mongodb=127.0.0.1:27017
stdout_logfile=/var/log/cloudprefs.log
stderr_logfile=/var/log/cloudprefs.log
user=nobody
group=nogroup
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=10
directory=/tmp
numprocs=8
numprocs_start=8001
#+END_SRC

To support a cluster of MongoDB hosts, use something like =--mongodb=10.0.0.1:27017,10.0.0.2:27017,10.0.0.3:27017=.

Configure Nginx by creating /etc/nginx/sites-enabled/default with the following configuration:

#+BEGIN_SRC conf
upstream cloudprefs {
    server 127.0.0.1:8001 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8002 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8003 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8004 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8005 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8006 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8007 max_fails=3 fail_timeout=1s;
    server 127.0.0.1:8008 max_fails=3 fail_timeout=1s;
}

server {
    listen 0.0.0.0:80;
    server_name localhost;
    access_log /var/log/nginx/cloudprefs.log main;
    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_pass http://cloudprefs/;
    }
}
#+END_SRC

You may also want to adjust ~worker_connections~ in /etc/nginx/nginx.conf to something higher.

** Starting services

Once you have the configuration in place, add it to Supervisor:

#+BEGIN_SRC sh
supervisorctl update
supervisorctl status
service nginx restart
#+END_SRC

Or you can start it up manually:

#+BEGIN_SRC sh
python -m cloudprefs
#+END_SRC

** Testing & examples

#+BEGIN_SRC sh
pip install httpie
echo '"secretpassword"' | http http://localhost:8888/servers/b36d8906-3b97-4e26-a501-e1f9191b8765/password X-Tenant-Id:123456
http http://localhost:8888/servers/b36d8906-3b97-4e26-a501-e1f9191b8765/password X-Tenant-Id:123456
#+END_SRC
